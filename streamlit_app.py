# -*- coding: utf-8 -*-
"""Loan_Defaulter

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/193E_Og5JlOvRGnVspMd_H1cgTbpv9tkI
"""

import streamlit as st
import pandas as pd
import joblib
import xgboost as xgb
import matplotlib.pyplot as plt
import seaborn as sns

st.set_page_config(page_title="Loan Default Predictor", layout="wide")

# Load model
@st.cache_resource
def load_model():
    return joblib.load("final_model.pkl")

xgb_model = load_model()

# Default values for other features
feature_defaults = {
    'Guaranteed_Approved__Loan_Clean': 1000000,
    'Loan_Approved_Gross': 1000000,
    'Gross_Amount_Disbursed': 950000,
    'ChargedOff_Amount': 0,
    'Year_Of_Commitment': 2021,
    'Date_Of_Disbursement': '2021-01-01',
    'Commitment_Date': '2020-12-01'
}

# Derived features calculator
def compute_derived_features(inputs):
    df = pd.DataFrame([inputs])

    df['ChargedOff_Amount_Clean'] = df['ChargedOff_Amount']
    df['Loan_Approved_Gross_Clean'] = df['Loan_Approved_Gross']
    df['Gross_Amount_Disbursed_Clean'] = df['Gross_Amount_Disbursed']

    df['ChargedOff_to_Approved'] = df['ChargedOff_Amount_Clean'] / df['Guaranteed_Approved__Loan_Clean']
    df['Disbursed_to_Approved'] = df['Gross_Amount_Disbursed_Clean'] / df['Guaranteed_Approved__Loan_Clean']

    df['Year_Of_Commitment'] = pd.to_numeric(df['Year_Of_Commitment'])
    df['Commitment_Date'] = pd.to_datetime(df['Commitment_Date'])
    df['Date_Of_Disbursement'] = pd.to_datetime(df['Date_Of_Disbursement'])
    df['Loan_Age_Days'] = (pd.Timestamp.today() - df['Date_Of_Disbursement']).dt.days
    df['Processing_Delay_Days'] = (df['Date_Of_Disbursement'] - df['Commitment_Date']).dt.days
    df['Commitment_to_Disbursement_Ratio'] = df['Processing_Delay_Days'] / df['Loan_Age_Days']

    # Final feature list must match training
    expected_features = xgb_model.get_booster().feature_names
    return df[expected_features]

# Tab setup
tabs = st.tabs(["üìà Predict Default", "üìä Dashboard"])

# Tab 1: Prediction
with tabs[0]:
    st.title("üìà Predict Loan Default")
    st.write("Enter loan and borrower details below:")

    col1, col2 = st.columns(2)
    with col1:
        loan_amount = st.number_input("Guaranteed Approved Loan Amount", value=feature_defaults['Guaranteed_Approved__Loan_Clean'])
        disbursed = st.number_input("Gross Amount Disbursed", value=feature_defaults['Gross_Amount_Disbursed'])
        charged_off = st.number_input("Charged Off Amount", value=feature_defaults['ChargedOff_Amount'])
        loan_approved = st.number_input("Loan Approved Gross", value=feature_defaults['Loan_Approved_Gross'])
    with col2:
        year_commitment = st.number_input("Year of Commitment", value=feature_defaults['Year_Of_Commitment'])
        disbursement_date = st.date_input("Date of Disbursement", value=pd.to_datetime(feature_defaults['Date_Of_Disbursement']))
        commitment_date = st.date_input("Commitment Date", value=pd.to_datetime(feature_defaults['Commitment_Date']))

    if st.button("Predict"):
        user_inputs = {
            'Guaranteed_Approved__Loan_Clean': loan_amount,
            'Gross_Amount_Disbursed': disbursed,
            'ChargedOff_Amount': charged_off,
            'Loan_Approved_Gross': loan_approved,
            'Year_Of_Commitment': year_commitment,
            'Date_Of_Disbursement': disbursement_date,
            'Commitment_Date': commitment_date
        }

        input_df = compute_derived_features(user_inputs)
        prediction = xgb_model.predict(input_df)[0]
        probability = xgb_model.predict_proba(input_df)[0][1]

        st.subheader("üìå Prediction Result")
        if prediction == 1:
            st.error(f"‚ùå Loan is likely to default. Risk score: {probability:.2%}")
        else:
            st.success(f"‚úÖ Loan is unlikely to default. Risk score: {probability:.2%}")

# Tab 2: Dashboard
with tabs[1]:
    st.title("üìä Dashboard - Feature Insights")

    st.write("### Feature Importance - Frequency")
    fig1, ax1 = plt.subplots()
    xgb.plot_importance(xgb_model, ax=ax1, importance_type='weight', max_num_features=10)
    st.pyplot(fig1)

    st.write("### Feature Importance - Gain")
    fig2, ax2 = plt.subplots()
    xgb.plot_importance(xgb_model, ax=ax2, importance_type='gain', max_num_features=10)
    st.pyplot(fig2)

    st.write("### Feature Importance - Coverage")
    fig3, ax3 = plt.subplots()
    xgb.plot_importance(xgb_model, ax=ax3, importance_type='cover', max_num_features=10)
    st.pyplot(fig3)

    st.markdown("---")
    st.write("**Note**: These visualizations show how frequently and effectively different features are used across all trees in the model.")

